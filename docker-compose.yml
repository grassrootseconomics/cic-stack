version: "3"

volumes:
  ganache-db: {}
  postgres-db: {}
  bee-data: {}
  signer-data: {}
  bloxberg-data: {}
  contract-config: 
    driver_opts:
      type: local
      o: bind
      device: ./service-configs

networks:
  default:
    name: cic-network

services:
  # eth:
  #   image: trufflesuite/ganache-cli
  #   ports:
  #     - ${HTTP_PORT_ETH:-8545}
  #     - ${WS_PORT_ETH:-8546}
  #   # Note! -e switch doesnt work, whatever you  put there, it will be 100
  #   command: "-i 8996 -e 1000 -l 90000000 \
  #           -m '${DEV_MNEMONIC:-\"history stumble mystery avoid embark arrive mom foil pledge keep grain dice\"}' \
  #           -v --db /tmp/cic/ganache/ganache.db \
  #           --noVMErrorsOnRPCResponse --allowUnlimitedContractSize"
  #   volumes:
  #     - ganache-db:/tmp/cic/ganache

  eth:
    build:
      context: apps/bloxbergValidatorSetup
    restart: unless-stopped
    ports:
      - ${DEV_ETH_PORT_HTTP:-63545}:8545
      - ${DEV_ETH_PORT_WS:-63546}:8546
      - 30303
    volumes:
      - ./apps/bloxbergValidatorSetup/keys:/root/keys # stores the signing key locally
      - bloxberg-data:/root/.local/share/io.parity.ethereum/

  # See contents of /initdb/create_db.sql for app user, password and databases
  postgres:
    image: postgres:12.5-alpine
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust # for postgres user access w/o password. Obvioulsy not safe but allows easy elevated debugging.  
      # PGDATA: /tmp/cic/postgres
    ports:
      - ${DEV_POSTGRES_PORT:-63432}:5432
    command: [ "-c", "max_connections=200" ]
    volumes:
      - ./scripts/initdb/create_db.sql:/docker-entrypoint-initdb.d/1-create_all_db.sql 
      - ./apps/cic-meta/scripts/initdb/postgresql.sh:/docker-entrypoint-initdb.d/2-init-cic-meta.sh
      - ./apps/cic-cache/db/psycopg2/db.sql:/docker-entrypoint-initdb.d/3-init-cic-meta.sql
      - postgres-db:/var/lib/postgresql/data

  redis:
    image: redis:6.0.9-alpine
    ports:
      - ${DEV_REDIS_PORT:-63379}:6379
    command: "--loglevel verbose"

  bee:
    image: ethersphere/bee:0.4.1
    container_name: bee
    environment:
      BEE_NETWORK_ID: ${BEE_NETWORK_ID:-313}
      BEE_PASSWORD: ${BEE_PASSWORD:-password}
    ports:
      - ${DEV_BEE_PORT:-63633}:1633
      - ${DEV_BEE_PORT_DEBUG:-63635}:1635
    command: "start --swap-enable=false --standalone"
    volumes:
      - bee-data:/tmp/cic/bee

  contract-migration:
    build:
      context: apps/
      dockerfile: contract-migration/docker/Dockerfile
    # image: registry.gitlab.com/grassrootseconomics/cic-internal-integration/contract-migration:latest
    environment:
      # ETH_PROVIDER should be broken out into host/port but cic-eth expects this
      ETH_PROVIDER: http://eth:8545
      # And these two are for wait-for-it (could parse this)
      ETH_PROVIDER_HOST: eth 
      ETH_PROVIDER_PORT: 8545
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      CIC_DATA_DIR: ${CIC_DATA_DIR:-/tmp/cic/config}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DEV_DATABASE_NAME_CIC_ETH:-cic_eth}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgresql}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_USER: ${DATABASE_USER:-postgres}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379}
      CELERY_RESULT_URL: ${CELERY_RESULT_URL:-redis://redis:6379}
      DEV_PIP_EXTRA_INDEX_URL: ${DEV_PIP_EXTRA_INDEX_URL:-https://pip.grassrootseconomics.net:8433}
      RUN_MASK: 2 #0: nohp 1: contract migrations 2: seed data
    command: ["./run_job.sh"]
        #command: ["./reset.sh"]
    depends_on:
      - eth
      - postgres
      - redis
      - cic-eth-tasker
    volumes:
      - contract-config:/tmp/cic/config

  cic-cache-tracker:
    build:
      context: apps
      dockerfile: cic-cache/docker/Dockerfile
    environment:
      CIC_REGISTRY_ADDRESS: $CIC_REGISTRY_ADDRESS # supplied at contract-config after contract provisioning
      ETH_PROVIDER: ${ETH_PROVIDER:-http://eth:8545}
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala} # this is is set at initdb see: postgres/initdb/create_db.sql
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME_CIC_CACHE:-cic_cache}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_DEBUG: 1
      ETH_ABI_DIR: ${ETH_ABI_DIR:-/usr/local/share/cic/solidity/abi}
      CIC_TRUST_ADDRESS: ${DEV_ETH_ACCOUNT_CONTRACT_DEPLOYER:-0xEb3907eCad74a0013c259D5874AE7f22DcBcC95C}
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_URL: redis://redis:6379
    deploy: 
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - postgres
      - eth
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        /usr/local/bin/cic-cache-trackerd -vv
    volumes:
      - contract-config:/tmp/cic/config/:ro

  cic-cache-tasker:
    build:
      context: apps
      dockerfile: cic-cache/docker/Dockerfile
    environment:
      CIC_REGISTRY_ADDRESS: $CIC_REGISTRY_ADDRESS # supplied at contract-config after contract provisioning
      ETH_PROVIDER: ${ETH_PROVIDER:-http://eth:8545}
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala} # this is is set at initdb see: postgres/initdb/create_db.sql
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME_CIC_CACHE:-cic_cache}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_DEBUG: 1
      ETH_ABI_DIR: ${ETH_ABI_DIR:-/usr/local/share/cic/solidity/abi}
      CIC_TRUST_ADDRESS: ${DEV_ETH_ACCOUNT_CONTRACT_DEPLOYER:-0xEb3907eCad74a0013c259D5874AE7f22DcBcC95C}
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_URL: redis://redis:6379
    deploy: 
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - postgres
      - eth
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        /usr/local/bin/cic-cache-taskerd -vv
    volumes:
      - contract-config:/tmp/cic/config/:ro

  cic-cache-server:
    build: 
        context: apps
        dockerfile: cic-cache/docker/Dockerfile
    environment:
      DATABASE_USER: $DATABASE_USER
      DATABASE_HOST: $DATABASE_HOST
      DATABASE_PORT: $DATABASE_PORT
      DATABASE_PASSWORD: $DATABASE_PASSWORD
      DATABASE_NAME: $DATABASE_NAME_CIC_CACHE
      DATABASE_DEBUG: 1
      PGPASSWORD: $DATABASE_PASSWORD
      SERVER_PORT: 8000
    ports:
      - ${HTTP_PORT_CIC_CACHE:-63313}:8000
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        "/usr/local/bin/uwsgi" \
        --wsgi-file /usr/src/cic-cache/cic_cache/runnable/serverd.py \
        --http :8000 \
        --pyargv -vv

  cic-eth-tasker:
    # image: grassrootseconomics:cic-eth-service
    build: 
        context: apps/
        dockerfile: cic-eth/docker/Dockerfile
    environment:
      CIC_REGISTRY_ADDRESS: $CIC_REGISTRY_ADDRESS
      ETH_GAS_PROVIDER_ADDRESS: $DEV_ETH_ACCOUNT_GAS_PROVIDER
      ETH_PROVIDER: http://eth:8545
      ETH_ABI_DIR: ${ETH_ABI_DIR:-/usr/local/share/cic/solidity/abi}
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala}
      DATABASE_NAME: ${DATABASE_NAME_CIC_ETH:-cic_eth}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_DEBUG: ${DATABASE_DEBUG:-0}
      PGPASSWORD: ${DATABASE_PASSWORD:-tralala}
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      BANCOR_DIR: ${BANCOR_DIR:-/usr/local/share/cic/bancor}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis}
      CELERY_RESULT_URL: ${CELERY_RESULT_URL:-redis://redis}
      SIGNER_SOCKET_PATH: ${SIGNER_SOCKET_PATH:-ipc:///run/crypto-dev-signer/jsonrpc.ipc}
      SIGNER_SECRET: ${SIGNER_SECRET:-deadbeef}
      ETH_ACCOUNT_ACCOUNTS_INDEX_WRITER: ${DEV_ETH_ACCOUNT_ACCOUNTS_INDEX_WRITER:-0xACB0BC74E1686D62dE7DC6414C999EA60C09F0eA}
      TASKS_TRACE_QUEUE_STATUS: ${TASKS_TRACE_QUEUE_STATUS:-1}
    depends_on:
      - eth
      - postgres
      - redis
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - signer-data:/tmp/cic/signer
      - contract-config:/tmp/cic/config/:ro
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        ./start_tasker.sh -q cic-eth  -vv
    # command: [/bin/sh, "./start_tasker.sh", -q, cic-eth, -vv ]

  cic-eth-tracker:
    build:
        context: apps/
        dockerfile: cic-eth/docker/Dockerfile
    environment:
      ETH_PROVIDER: http://eth:8545
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala}
      DATABASE_NAME: ${DATABASE_NAME_CIC_CACHE:-cic_eth}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_DEBUG: ${DATABASE_DEBUG:-0}
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      CIC_REGISTRY_ADDRESS: $CIC_REGISTRY_ADDRESS
        #BANCOR_DIR: $BANCOR_DIR
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis}
      CELERY_RESULT_URL: ${CELERY_RESULT_URL:-redis://redis}
      TASKS_TRANSFER_CALLBACKS: $TASKS_TRANSFER_CALLBACKS
    depends_on:
      - eth
      - postgres
      - redis
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - contract-config:/tmp/cic/config/:ro
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        ./start_tracker.sh -vv -c /usr/local/etc/cic-eth
    # command: "/root/start_manager.sh head -vv"


  cic-eth-dispatcher:
    build:
        context: apps/
        dockerfile: cic-eth/docker/Dockerfile
    environment:
      ETH_PROVIDER: http://eth:8545
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala}
      DATABASE_NAME: ${DATABASE_NAME_CIC_CACHE:-cic_eth}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      CIC_REGISTRY_ADDRESS: $CIC_REGISTRY_ADDRESS
        #BANCOR_DIR: $BANCOR_DIR
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis}
      CELERY_RESULT_URL: ${CELERY_RESULT_URL:-redis://redis}
      TASKS_TRANSFER_CALLBACKS: $TASKS_TRANSFER_CALLBACKS
        #DATABASE_DEBUG: ${DATABASE_DEBUG:-false}
      DATABASE_DEBUG: 1

    depends_on:
      - eth
      - postgres
      - redis
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
        - contract-config:/tmp/cic/config/:ro
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        ./start_dispatcher.sh -q cic-eth -vv
    # command: "/root/start_dispatcher.sh -q cic-eth -vv"


  cic-eth-retrier:
    build:
        context: apps/
        dockerfile: cic-eth/docker/Dockerfile
    environment:
      ETH_PROVIDER: http://eth:8545
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala}
      DATABASE_NAME: ${DATABASE_NAME_CIC_CACHE:-cic_eth}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_DEBUG: ${DATABASE_DEBUG:-0}
      CIC_CHAIN_SPEC: ${CIC_CHAIN_SPEC:-evm:bloxberg:8996}
      CIC_REGISTRY_ADDRESS: $CIC_REGISTRY_ADDRESS
        #BANCOR_DIR: $BANCOR_DIR
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis}
      CELERY_RESULT_URL: ${CELERY_RESULT_URL:-redis://redis}
      TASKS_TRANSFER_CALLBACKS: $TASKS_TRANSFER_CALLBACKS
      CIC_TX_RETRY_DELAY: 15
    depends_on:
      - eth
      - postgres
      - redis
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
        - contract-config:/tmp/cic/config/:ro
    command:
      - /bin/bash
      - -c
      - |
        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
        ./start_retry.sh -v
    # command: "/root/start_retry.sh -q cic-eth -vv"


#  cic-eth-server:
#    build:
#      context: apps/
#      dockerfile: cic-eth/docker/Dockerfile
#    environment:
#      CIC_CHAIN_SPEC: $CIC_CHAIN_SPEC
#      CELERY_BROKER_URL: $CELERY_BROKER_URL
#      CELERY_RESULT_URL: $CELERY_RESULT_URL
#      SERVER_PORT: 8000
#    depends_on:
#      - eth
#      - postgres
#      - redis
#    ports:
#      - ${HTTP_PORT_CIC_ETH:-63314}:8000
#    deploy:
#      restart_policy:
#        condition: on-failure
#    volumes:
#        - contract-config:/tmp/cic/config/:ro
#    command:
#      - /bin/bash
#      - -c
#      - |
#        if [[ -f /tmp/cic/config/.env ]]; then source /tmp/cic/config/.env; fi 
#        "/usr/local/bin/uwsgi" \
#        --wsgi-file /usr/src/cic-eth/cic_eth/runnable/server_agent.py \
#        --http :80 \
#        --pyargv -vv
##     entrypoint:
##       - "/usr/local/bin/uwsgi"
##       - "--wsgi-file"
##       - "/usr/src/cic-eth/cic_eth/runnable/server_agent.py"
##       - "--http"
##       - ":80"
#    # command: "--pyargv -vv"



  cic-notify-tasker:
    build:
      context: apps/
      dockerfile: cic-notify/docker/Dockerfile
    environment:
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-tralala}
      DATABASE_NAME: ${DATABASE_NAME_CIC_NOTIFY:-cic_notify}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      PGPASSWORD: ${DATABASE_PASSWORD:-tralala}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis}
      CELERY_RESULT_URL: ${CELERY_BROKER_URL:-redis://redis}
      TASKS_AFRICASTALKING: $TASKS_AFRICASTALKING
      TASKS_SMS_DB: $TASKS_SMS_DB
      TASKS_LOG: $TASKS_LOG
    depends_on:
      - postgres
      - redis
    deploy:
      restart_policy:
        condition: on-failure
    command: "/root/start_tasker.sh -q cic-notify"


  cic-meta-server:
    build:
      context: apps/
      dockerfile: cic-meta/docker/Dockerfile
    environment:
      DATABASE_NAME: ${DATABASE_NAME:-cic_meta}
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgres}
      DATABASE_DRIVER: ${DATABASE_DRIVER:-psycopg2}
      DATABASE_USER: ${DATABASE_USER:-grassroots}
      DATABASE_HOST: ${DATABASE_HOST:-postgres}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      SERVER_HOST: localhost
      SERVER_PORT: 8000
      DATABASE_SCHEMA_SQL_PATH: ""
      PGP_EXPORTS_DIR: /tmp/src/cic-meta/tests/
      PGP_PRIVATEKEY_FILE: privatekeys.asc
      PGP_PASSPHRASE: merman
      PGP_PUBLICKEY_TRUSTED_FILE: publickeys.asc
      PGP_PUBLICKEY_ACTIVE_FILE: publickeys.asc
      PGP_PUBLICKEY_ENCRYPT_FILE: publickeys.asc
    ports:
      - ${HTTP_PORT_CIC_META:-63380}:8000
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - ${LOCAL_VOLUME_DIR:-/tmp/cic}/pgp:/tmp/cic/pgp
    # command: "/root/start_server.sh -vv"

  cic-ussd-server:
    # image: grassrootseconomics:cic-ussd
    build:
      context: apps/
      dockerfile: cic-ussd/docker/Dockerfile
    environment:
      DATABASE_USER: grassroots
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: tralala
      DATABASE_NAME: cic_ussd
      DATABASE_ENGINE: postgresql
      DATABASE_DRIVER: psycopg2
      PGP_PASSPHRASE: merman
      SERVER_PORT: 8000
    ports:
      - ${HTTP_PORT_CIC_USSD:-63315}:8000
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/contract-migration/testdata/pgp/:/usr/src/secrets/
    deploy:
      restart_policy:
        condition: on-failure
    command: "/root/start_uwsgi.sh"

  cic-ussd-tasker:
    # image: grassrootseconomics:cic-ussd
    build:
      context: apps
      dockerfile: cic-ussd/docker/Dockerfile
    environment:
      DATABASE_USER: grassroots
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: tralala
      DATABASE_NAME: cic_ussd
      DATABASE_ENGINE: postgresql
      DATABASE_DRIVER: psycopg2
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis}
      CELERY_RESULT_URL: ${CELERY_BROKER_URL:-redis://redis}
      PGP_PASSPHRASE: merman
    depends_on:
      - postgres
      - redis
    volumes:
      - ./apps/contract-migration/testdata/pgp/:/usr/src/secrets/
    deploy:
      restart_policy:
        condition: on-failure
    command: "/root/start_tasker.sh -q cic-ussd"
