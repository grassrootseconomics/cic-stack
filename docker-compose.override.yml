version: "3.9"

services:
  proxy: 
    ports:
      - "80:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80

  postgres:
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust # for postgres user access w/o password. Obvioulsy not safe but allows easy elevated debugging.  
    ports:
      - ${DEV_POSTGRES_PORT:-63432}:5432
    volumes:
      - ./scripts/initdb/create_db.sql:/docker-entrypoint-initdb.d/1-create_all_db.sql 

  pgadmin:
    ports:
      - "5050:5050"

  flower:
    ports:
      - "5555:5555"

  eth:
    restart: unless-stopped
    ports:
      - ${DEV_ETH_PORT_HTTP:-63545}:8545
      - ${DEV_ETH_PORT_WS:-63546}:8546
      - 30303
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-bloxberg-http.rule=Host(`bloxberg.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-bloxberg.loadbalancer.server.port=8545

  redis:
    ports:
      - ${DEV_REDIS_PORT:-63379}:6379
    command: "--loglevel verbose"

  cicada:
    ports:
      - 4200:80
    build:
      context: ./apps/cic-staff-client
      dockerfile: Dockerfile.local
    #build:
    #  dockerfile: Dockerfile.local
    #  args:
    #    FRONTEND_ENV: dev
    #ports:
    #  - 4200:4200
    #command: npm run start:dev
    ##command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    volumes:
      - ./apps/cic-staff-client/dist/cic-staff-client:/usr/share/nginx/html/
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80
        
  cic-cache-server:
    ports:
      - "63313:8000"
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-cache-http.rule=Host(`cache.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-cache.loadbalancer.server.port=8000

  cic-meta-server:
    ports:
      - ${HTTP_PORT_CIC_META:-63380}:8000
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-meta-http.rule=Host(`meta.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-meta.loadbalancer.server.port=8000
      - traefik.http.middlewares.${STACK_NAME?Variable not set}.forwardauth.address=http://auth-proxy-meta/

  cic-user-ussd-server:
    ports:
      - ${HTTP_PORT_CIC_USER_USSD_SERVER:-63315}:9000
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-ussd-http.rule=Host(`ussd.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-ussd.loadbalancer.server.port=9000

  cic-user-server:
    ports:
      - ${HTTP_PORT_CIC_USER_SERVER:-63415}:9500
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-user-http.rule=Host(`user.${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-user.loadbalancer.server.port=9500

  auth-proxy-meta:
    labels:
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-meta.forwardauth.address=http://auth-proxy-meta:4181"
      - "traefik.http.middlewares.${STACK_NAME?Variable not set}-meta.forwardauth.authResponseHeaders=WWW-Authenticate, Token"
      - "traefik.http.services.traefik-forward-auth.loadbalancer.server.port=4181"

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
